//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.6407
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageProcessing.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ImageProcessing.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to float Amount : register(C1);
        ///sampler2D  Texture1Sampler : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///    float4 c = 0;
        ///    float r360 =  0.0174533f;
        ///    float rad ;
        ///    float xOffset;
        ///    float yOffset;
        ///
        ///	c += tex2D(Texture1Sampler, uv);
        ///	float2 v; 
        /// 
        ///    for(int i=0; i&lt;8; i++)
        ///    {
        ///		rad= i*45 * r360;
        ///		xOffset = cos(rad);
        ///		yOffset = sin(rad);
        ///        v.x = uv.x -( Amount * xOffset);
        ///        v.y = uv.y -( Amount * yOffset);
        ///        c += tex2D(Texture1Sampler, v);
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Blur {
            get {
                return ResourceManager.GetString("Blur", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to float Angle : register(C0);
        ///float Amount : register(C1);
        ///sampler2D  Texture1Sampler : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///    float4 c = 0;
        ///    float rad = Angle * 0.0174533f;
        ///    float xOffset = cos(rad);
        ///    float yOffset = sin(rad);
        ///
        ///    for(int i=0; i&lt;16; i++)
        ///    {
        ///        uv.x = uv.x - Amount/16 * xOffset;
        ///        uv.y = uv.y - Amount/16 * yOffset;
        ///        c += tex2D(Texture1Sampler, uv);
        ///    }
        ///    c /= 16;
        ///    
        ///    return c;
        ///}
        ///
        ///
        ///technique Tech
        ///{
        ///	pass P [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DirectionalBlur {
            get {
                return ResourceManager.GetString("DirectionalBlur", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to sampler2D input : register(s0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR 
        ///{ 
        ///		
        ///	float4 color; 
        ///	color= tex2D( input , uv.xy); 
        ///		
        ///    color.r = (color.r +color.g + color.b)/3.0f;
        ///    color.g = color.r;
        ///    color.b = color.r;
        ///	return color; 
        ///}
        ///
        ///
        ///
        ///
        ///technique Tech
        ///{
        ///	pass Pss
        ///	{
        ///	pixelshader = compile ps_2_0 main();
        ///	}
        ///}
        ///
        ///.
        /// </summary>
        internal static string GrayScale {
            get {
                return ResourceManager.GetString("GrayScale", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///sampler2D Texture1Sampler : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///   float4 color = tex2D( Texture1Sampler, uv );
        ///   float4 invertedColor = float4(color.a - color.rgb, color.a);
        ///   return invertedColor;
        ///}
        ///
        ///
        ///technique Tech
        ///{
        ///	pass Pss
        ///	{
        ///	pixelshader = compile ps_2_0 main();
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string Invert {
            get {
                return ResourceManager.GetString("Invert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to float4 FilterColor : register(C0);
        ///sampler2D  Texture1Sampler : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///   float4 srcColor = tex2D(Texture1Sampler, uv);
        ///   float3 rgb = srcColor.rgb;
        ///   float3 luminance = dot(rgb, float3(0.30, 0.59, 0.11));
        ///   return float4(luminance * FilterColor.rgb, srcColor.a);
        ///}
        ///
        ///technique Tech
        ///{
        ///	pass Pss
        ///	{
        ///	pixelshader = compile ps_2_0 main();
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string MonoChrome {
            get {
                return ResourceManager.GetString("MonoChrome", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to sampler2D TexSampler : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///    float4 color = tex2D(TexSampler, uv);
        ///    
        ///    float gray = dot(color, float4(0.3, 0.59, 0.11, 0)); 
        ///    color = float4(gray * float3(0.9, 0.8, 0.4) , color.a); 
        ///   
        ///    return color;
        ///}
        ///    
        ///    
        ///    
        ///technique Tech
        ///{
        ///	pass Pss
        ///	{
        ///	pixelshader = compile ps_2_0 main();
        ///	}
        ///}
        ///
        ///.
        /// </summary>
        internal static string OldMovie {
            get {
                return ResourceManager.GetString("OldMovie", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to float2 PixelCounts : register(C0);
        ///float BrickOffset : register(C1);
        ///sampler2D Texture1Sampler : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///   float2 brickSize = 1.0 / PixelCounts;
        ///
        ///   // Offset every other row of bricks
        ///   float2 offsetuv = uv;
        ///   bool oddRow = floor(offsetuv.y / brickSize.y) % 2.0 &gt;= 1.0;
        ///   if (oddRow)
        ///   {
        ///       offsetuv.x += BrickOffset * brickSize.x / 2.0;
        ///   }
        ///   
        ///   float2 brickNum = floor(offsetuv / brickSize);
        ///   float2 centerOfBrick = brickNum *  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Pixelate {
            get {
                return ResourceManager.GetString("Pixelate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to float2 Center : register(C0);
        ///float Amplitude : register(C1);
        ///float Frequency: register(C2);
        ///float Phase: register(C3);
        ///float AspectRatio : register(C4);
        ///sampler2D Texture1Sampler : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        /// 
        ///	float2 dir = uv - Center; // vector from center to pixel
        ///	dir.y /= AspectRatio;
        ///	float dist = length(dir);
        ///	dir /= dist;
        ///	dir.y *= AspectRatio;
        ///
        ///	float2 wave;
        ///	sincos(Frequency * dist + Phase, wave.x, wave.y);
        ///		
        ///	float falloff = saturate(1 - dist); [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Ripple {
            get {
                return ResourceManager.GetString("Ripple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to float2 Center : register(C0);
        ///float SpiralStrength : register(C1);
        ///float AspectRatio : register(C2);
        ///sampler2D input : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///	float2 dir = uv - Center;
        ///	dir.y /= AspectRatio;
        ///	float dist = length(dir);
        ///	float angle = atan2(dir.y, dir.x);
        ///
        ///	float newAngle = angle + SpiralStrength * dist;
        ///	float2 newDir;
        ///	sincos(newAngle, newDir.y, newDir.x);
        ///	newDir.y *= AspectRatio;
        ///	
        ///	float2 samplePoint = Center + newDir * dist;
        ///	bool isValid = all(samp [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Swirl {
            get {
                return ResourceManager.GetString("Swirl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to float Levels : register(C0);
        ///sampler2D Texture1Sampler : register(S0);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///	float4 color = tex2D( Texture1Sampler, uv );
        ///	color.rgb /= color.a;
        ///
        ///	int levels = floor(Levels);
        ///	color.rgb *= levels;
        ///	color.rgb = floor(color.rgb);
        ///	color.rgb /= levels;
        ///	color.rgb *= color.a;
        ///	return color;
        ///}
        ///
        ///technique Tech
        ///{
        ///	pass Pss
        ///	{
        ///	pixelshader = compile ps_2_0 main();
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string ToneLevels {
            get {
                return ResourceManager.GetString("ToneLevels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to sampler2D input : register(s0);
        ///float Time : register(C0);
        ///float WaveSize: register(C1);
        ///
        ///float dist(float a, float b, float c, float d){
        ///	return sqrt((a - c) * (a - c) + (b - d) * (b - d));
        ///}
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR 
        ///{ 
        ///	float4 Color = 0;
        ///	float f = sin(dist(uv.x + Time, uv.y, 0.128, 0.128)*WaveSize)
        ///                  + sin(dist(uv.x, uv.y, 0.64, 0.64)*WaveSize)
        ///                  + sin(dist(uv.x, uv.y + Time / 7, 0.192, 0.64)*WaveSize);
        ///	uv.xy = uv.xy+((f/WaveSize));
        ///	Colo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WaveWarper {
            get {
                return ResourceManager.GetString("WaveWarper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to sampler2D  input : register(S0);
        ///
        ///float progress  : register(c0);
        ///float2 center : register(c1);
        ///
        ///float4 main(float2 uv : TEXCOORD) : COLOR
        ///{
        ///
        ///float BlurAmount =- progress * .4;
        /// float4 c = 0;    
        /// uv -= center ;
        ///
        /// for (int i = 0; i &lt; 14; i++)  {
        ///  float scale = 1.0 + BlurAmount * (i / 13.0);
        ///  c += tex2D(input , uv * scale + center );
        /// }
        ///   
        /// c /= 14;
        ///  
        ///return c;
        ///}
        ///
        ///
        ///technique Tech
        ///{
        ///	pass Pss
        ///	{
        ///	pixelshader = compile ps_2_0 main();
        ///	}
        ///}
        ///
        ///.
        /// </summary>
        internal static string ZoomBlur {
            get {
                return ResourceManager.GetString("ZoomBlur", resourceCulture);
            }
        }
    }
}
